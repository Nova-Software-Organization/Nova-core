spring:
  datasource:
    url: jdbc:mariadb://localhost:3306/delivery
    username: root
    password: Bont
  jpa:
    hibernate:
      ddl-auto: update
  mvc:
    throw-exception-if-no-handler-found: true
    driver-class-name: org.mariadb.jdbc.Driver
    
# Configuração do Redis
cache:
  type: redis
  redis:
    host: 127.0.0.1
    port: 6379
  time-to-live: 3600
management:
  endpoint:
    caches:
      enabled: true

thymeleaf:
  prefix: classpath:/templates/
  suffix: .html
  mode: HTML
  main:
    allow-bean-definition-overriding: true
  corsConfig: "http://localhost:3000"

# Configure Jackson to handle Hibernate objects
jackson:
  serialization:
    FAIL_ON_EMPTY_BEANS: false
  mapper:
    DEFAULT_VIEW_INCLUSION: true
    serialization:
      INDENT_OUTPUT: true
  deserialization:
    UNWRAP_ROOT_VALUE: false

# Configuração circuit break
resilience4j:
  circuitbreaker:
    instances:
      cancelamentopedido:
        slidingWindowSize: 3
        minimumNumberOfCalls: 2
        waitDurationInOpenState: 50s
      criarpedido:
        slidingWindowSize: 3
        minimumNumberOfCalls: 2
        waitDurationInOpenState: 50s

# Configuração do Log4j2
logging:
  level:
    org.springframework.jdbc.core: DEBUG
  log4j2:
    appender:
      jdbc:
        name: databaseAppender
        type: JDBC
        dataSource: java:comp/env/jdbc/DataSource
        tableName: logs
        columnConfigs:
          column1:
            type: VARCHAR
            name: log_date
          column2:
            type: VARCHAR
            name: logger_name
          column3:
            type: VARCHAR
            name: log_level
          column4:
            type: VARCHAR
            name: message
          column5:
            type: VARCHAR
            name: exception
    rootLogger:
      level: INFO
      appenderRef:
        jdbc:
          ref: databaseAppender


# Ativar o stack trace detalhado no console
# server.error.include-exception: true
# server.error.include-stacktrace: ALWAYS
# logging.level.root: DEBUG

# Configurar o modo de desenvolvimento
# spring.devtools.add-properties: false
# spring.thymeleaf.cache: false

# Em caso de deploy do back-end
# spring.datasource.url: ${DATABASE_URL}
# spring.datasource.username: ${DATABASE_USERNAME}
# spring.datasource.password: ${DATABASE_PASSWORD}

# Site utilizado para deploy: render

# Produção -> login
# database: database
# username: op56ui4jacljb3zwkjnp
# host: aws.connect.psdb.cloud
# password: pscale_pw_8glndG5Snw16f7FI4PEGMKMBDKHdCulWaBlcPzHJlMq

# spring -> Produção
# spring.datasource.url: jdbc:mysql:pscale_pw_8glndG5Snw16f7FI4PEGMKMBDKHdCulWaBlcPzHJlMq/database
# spring.datasource.host: aws.connect.psdb.cloud
# spring.datasource.username: op56ui4jacljb3zwkjnp

# Se caso precisar
# spring.datasource.password: pscale_pw_8glndG5Snw16f7FI4PEGMKMBDKHdCulWaBlcPzHJlMq

# Deploy railway banco de dados e aplicação
# spring.datasource.url: jdbc:mysql://root:oEDkWxWm4d6E6hIOuBrb@containers-us-west-199.railway.app:6850/railway
# spring.datasource.username: root
# spring.datasource.password: oEDkWxWm4d6E6hIOuBrb
